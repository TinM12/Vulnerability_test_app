import { Box, Button, Checkbox, Stack, TextField, Typography } from '@mui/material';
import React, { useState } from 'react';
import CryptoJS from 'crypto-js';
import axios from 'axios';

const SdeTest = () => {

    const [enabled, setEnabled] = useState(false);
    const [cardNum, setCardNum] = useState();
    const [result, setResult] = useState();
    const [error, setError] = useState();

    const handleChange = (event) => {
        setResult();
        setError();
        setCardNum();
        setEnabled(event.target.checked);
    }

    const handleConfirm = () => {
        setResult();
        setError();
        setCardNum();
        if(!Number(cardNum)) {
            setError('Broj kartice mora biti Integer!')
            return;
        }

        if(!enabled) {
            const encrypted = encryptData();
            sendToBackend(encrypted);
        } else {
            sendToBackend(cardNum);
        }
    }

    const handleClear = () => {
        setError();
        setResult();
        setCardNum();
    };

    const encryptData = () => {
        const secret = `${process.env.REACT_APP_SECRET}`
        const data = CryptoJS.AES.encrypt(
            JSON.stringify(cardNum),
            secret
        ).toString();
        
        return data;
    }

    const sendToBackend = async(number) => {
        const data = await axios.post(`${process.env.REACT_APP_BACKEND_URL}card`, {
            number: number
        });
        setResult(data.data);
    };
    
    return (
        <Stack direction='column' spacing='1rem' margin='1.5rem'>
            <Typography variant='h6' sx={{ textDecoration: 'underline', fontWeight: 'bold', color: '#C69749', marginLeft:'1rem' }}>
                Nesigurna pohrana osjetljivih podataka (Sensitive Data Exposure)
            </Typography>
            <Box display='flex' alignItems={'center'}>
                <Typography>
                    <b>Upute:</b> Nesigurna pohrana osjetljivih podataka omogućuje napadaču da pristupi osjetljivim podacima te da ih mijenja.
                    Do ove se ranjivosti najčešće dolazi zbog neispravne pohrane podataka u bazi, neispravnog prijenosa podataka,
                    korištenja zastarjelih algoritama za šifriranje, i slično. U ovom primjeru od korisnika se traži da upiše broj
                    kreditne kartice. Taj podatak se nakon toga šalje na Backend gdje bi se dalje njime rukovalo. Podaci o kreditnoj 
                    kartici smatraju se osjetljivima te ih je potrebno ispravno šifrirati prije prijenosa na Backend. Tijekom 
                    prijenosa i pohrane podaci moraju biti šifrirani jer postoji mogućnost da napadač tijekom prijenosa 
                    dohvati te podatke ili na neki način dođe do podataka pohranjenih u bazi. Ranjivost se može uključiti ili isključiti preko checkboxa.
                    Kada je ranjivost uključena, broj kreditne kartice prenosi se na Backend u obliku običnog teksta te u slučaju da 
                    napadač prisluškuje promet na putu prijenosa, on može vidjeti broj kartice. Kada je ranjivost isključena, broj kartice
                    se šifrira pomoću algoritma AES te se takav prenosi na Backend.   
                </Typography>
            </Box>
            <Box display='flex' alignItems={'center'}>
                <Checkbox color='secondary' checked={enabled} onChange={handleChange} />
                {enabled ? 
                    <Typography>
                        Ranjivost uključena
                    </Typography>
                    : <Typography>
                        Ranjivost isključena
                    </Typography>
                }
            </Box>
            <Stack direction='row' spacing='0.4rem' alignItems={'center'}>
                <Typography sx={{ fontSize: '1.1rem' }}>
                    Upišite broj kartice:
                </Typography>
                <TextField color='secondary' size='small' sx={{ width:'50%' }} value={cardNum || ""}
                    onChange={(e) => {
                        setCardNum(e.target.value);
                    }}
                />
                <Button color='success' variant='contained' onClick={handleConfirm}>
                    Potvrdi
                </Button>
                <Button color='error' variant='contained' onClick={handleClear}>
                    Izbriši
                </Button>
            </Stack>
            {result && 
                <Typography>
                    Broj kartice koji se prenosi: {result.number}
                </Typography>
            }
            {error &&
                <Typography color='error'>
                    {error}
                </Typography>
            }
        </Stack>
    );
};

export default SdeTest;