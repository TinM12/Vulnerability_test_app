import React, { useState } from 'react';
import { Box, Button, Checkbox, Stack, TextField, Typography } from '@mui/material';
import WelcomeUserComponent from '../WelcomeUserComponent';

const XssTest = () => {

    const dangerousInput = "<img onerror='alert(\"Hacked!\");' src='invalid-image' />"
    const scriptInput = "<script>alert(\"Hacked!\")</script>;"
    const [name, setName] = useState();
    const [welcome, setWelcome] = useState();
    const [enabled, setEnabled] = useState(false);

    const handleChange = (event) => {
        setName();
        setWelcome();
        setEnabled(event.target.checked);
    }

    const handleClear = () => {
        setName();
        setWelcome();
    };

    const printName = () => {
        setWelcome(name)
    }

    return (
        <Stack direction='column' spacing='1rem' margin='1.5rem'>
            <Typography variant='h6' sx={{ textDecoration: 'underline', fontWeight: 'bold', color: '#C69749', marginLeft:'1rem' }}>
                Cross-site scripting (XSS)
            </Typography>
            <Box display='flex' alignItems={'center'}>
                <Typography>
                    <b>Upute:</b> Ranjivost se može uključiti ili isključiti preko checkboxa. 
                    Iako React ima vrlo dobru obranu od XSS napada, svejedno postoji mogućnost za provedbu XSS napada
                    ako se koriste nesigurni načini ispisa podataka koje korisnik unosi. U ovom primjeru, od korisnika se
                    traži da upiše svoje ime. Nakon upisa imena i pritiska na gumb "Potvrdi", korisniku se ispisuje poruka 
                    dobrodošlice u obliku "Welcome [ime]". Takav oblik ispisa korisnikovog unosa potencijalno se može koristiti
                    za XSS napad. XSS napad se smatra uspješnim ako napadač umjesto imena upiše neki svoj JavaScript kod, a
                    poslužitelj ga izvede. Ako je ranjivost uključena, korisniku se poruka dobrodošlice ispisuje u obliku div-a 
                    kojemu je postavljen atribut "dangerouslySetInnerHTML". Prilikom unosa običnog script taga poput <b>"{scriptInput}"</b>,
                    unos je automatski blokiran. Međutim, napadač može unijeti nešto poput <b>"{dangerousInput}"</b>.
                    Time napadač daje img element koji u slučaju pogreške izvodi JavaScript kod (u ovom slučaju ispisuje se "Hacked!").
                    Nakon što se napadaču ispiše alert poruka, on zna da je XSS napad uspio te može na brojne načine iskoristiti 
                    tu ranjivost. Ako je ranjivost isključena, koristi se Reactov uobičajen način ispisa korisnikova unosa (unos se stavi unutar 
                    vitičastih zagrada) čime se dobiveni unos neće izvesti. Premda se koristi React, uobičajeni načini 
                    zaštite od XSS-a već su implementirani pa nije bilo potrebe za njihovom implementacijom. Inače bi bilo potrebno
                    provesti sanitizaciju HTML-a, izbjegavati znakove poput {">"}, {"<"} i slično.
                </Typography>
            </Box>
            <Box display='flex' alignItems={'center'}>
                <Checkbox color='secondary' checked={enabled} onChange={handleChange} />
                {enabled ? 
                    <Typography>
                        Ranjivost uključena
                    </Typography>
                    : <Typography>
                        Ranjivost isključena
                    </Typography>
                }
            </Box>
            <Stack direction='row' spacing='0.4rem' alignItems={'center'}>
                <Typography sx={{ fontSize: '1.1rem' }}>
                    Upišite svoje ime:
                </Typography>
                <TextField color='secondary' size='small' sx={{ width:'50%' }} value={name || ""}
                    onChange={(e) => {
                        setName(e.target.value);
                    }}
                />
                <Button color='success' variant='contained' onClick={printName}>
                    Potvrdi
                </Button>
                <Button color='error' variant='contained' onClick={handleClear}>
                    Izbriši
                </Button>
            </Stack>
            <WelcomeUserComponent welcome={welcome} enabled={enabled}/>
        </Stack>
    );
};

export default XssTest;